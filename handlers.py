import telebot
from telebot import formatting
import requests
from config import API_URL

def handle_start(message, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /login, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é /register –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /update."
    )

def handle_registration_or_update(message, bot, user_manager):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    chat_id = message.chat.id

    if message.text.startswith("/register"):
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        user_manager.set_user_status(chat_id, "register")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif message.text.startswith("/update"):
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        user_manager.set_user_status(chat_id, "update")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    user_manager.set_user_data(chat_id, {})  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

def collect_user_data(message, bot, user_manager):
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    status = user_manager.get_user_status(chat_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    if "name" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["name"] = message.text
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:")
    elif "login" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["login"] = message.text
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    elif "password" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["password"] = message.text
        bot.send_message(chat_id, "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤—ë—Ç–µ?")
    elif "country" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["country"] = message.text
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    elif "age" not in user_manager.get_user_data(chat_id):
        try:
            user_manager.get_user_data(chat_id)["age"] = int(message.text)
            bot.send_message(chat_id, "–ö–∞–∫–∏–µ —É –≤–∞—Å –≤–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?")
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    elif "preferences" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["preferences"] = message.text
        bot.send_message(chat_id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?")
    elif "diet_restrictions" not in user_manager.get_user_data(chat_id):
        user_manager.get_user_data(chat_id)["diet_restrictions"] = message.text
        bot.send_message(chat_id, "–ö–∞–∫–æ–≤ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –±–ª—é–¥–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500)")
    elif "budget" not in user_manager.get_user_data(chat_id):
        try:
            user_manager.get_user_data(chat_id)["budget"] = float(message.text)
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:")  # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –∫–∞–∫ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500).")
    elif "gender" not in user_manager.get_user_data(chat_id):  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ "gender"
        user_manager.get_user_data(chat_id)["gender"] = message.text
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if status == "register":
            response = requests.post(f"{API_URL}/users/", json=user_manager.get_user_data(chat_id))
            if response.status_code == 200:
                bot.send_message(chat_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {user_manager.get_user_data(chat_id)['name']}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /login.")
            else:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.")
        elif status == "update":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            response = requests.put(f"{API_URL}/users/{user_manager.get_user_data(chat_id)['login']}", json=user_manager.get_user_data(chat_id))
            if response.status_code == 200:
                bot.send_message(chat_id, f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, {user_manager.get_user_data(chat_id)['name']}!")
            else:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_manager.clear_user_data(chat_id)

def handle_login(message, bot, user_manager): 
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /login."""
    try:
        _, login, password = message.text.split()
        user_login_data = {"login": login, "password": password}
        response = requests.post(f"{API_URL}/login/", json=user_login_data)

        if response.status_code == 200:
            user_info = response.json()
            bot.send_message(
                message.chat.id,
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É, {user_info['name']}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /recipe."
            )
            user_manager.set_bot_user_data(message.chat.id, {"login": login, "name": user_info["name"]})
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    except ValueError:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /login <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")

def format_recipe_output(recipe):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Telegram."""
    title = formatting.hbold(recipe.get('recipe_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    ingredients = "\n".join([f"üîπ {item['name']} ({item['quantity']})" for item in recipe.get('ingredients', [])])
    instructions = "\n".join([f"‚ùáÔ∏è <b>{step['step_title']}</b>: {step['description']}" for step in recipe.get('instructions', [])])
    comments = recipe.get("comments", "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    cuisine = recipe.get("cuisine", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    calories = recipe.get("calories", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    health_benefits = recipe.get("health_benefits", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    rating = recipe.get("rating", "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ")

    formatted_output = (
        f"<b>{title}</b>\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n{ingredients}\n\n"  # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n{instructions}\n\n"  # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        f"<b>üçΩÔ∏è –ö—É—Ö–Ω—è:</b> {cuisine}\n"
        f"<b>üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:</b> {calories}\n"
        f"<b>üí™ –ü–æ–ª—å–∑–∞/–≤—Ä–µ–¥:</b> {health_benefits}\n"
        f"<b>‚ú® –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comments}\n"
        f"<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
    )

    return formatted_output

def send_recipe_with_image(bot, chat_id, recipe):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ —á–∞—Ç–µ Telegram."""
    
    image_url = recipe.get("image_url")
    formatted_output = format_recipe_output(recipe)

    if image_url:
        image_url = image_url.replace('https', 'http')
        bot.send_photo(chat_id, image_url, caption="", parse_mode='HTML')
    else:
        bot.send_message(chat_id, "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤!")
    bot.send_message(chat_id, formatted_output, parse_mode='HTML')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞

def handle_recipe_request(message, bot, user_manager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /recipe."""
    chat_id = message.chat.id
    user_info = user_manager.get_bot_user_data(chat_id)

    if not user_info:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é /login")
        return

    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /recipe –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_request = message.text[len("/recipe"):].strip()

    if not user_request:
        bot.send_message(chat_id, f"{user_info['name']}, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /recipe, –Ω–∞–ø—Ä–∏–º–µ—Ä: /recipe –•–æ—á—É –ø–∏—Ü—Ü—É.")
        return

    recipe_request = {
        "login": user_info["login"],
        "request": user_request  # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    response = requests.post(f"{API_URL}/recipes/", json=recipe_request)

    if response.status_code == 200:
        recipe_response = response.json().get('recipe')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç
        if recipe_response:
            send_recipe_with_image(bot, chat_id, recipe_response)
        else:
            bot.send_message(chat_id, f"{user_info['name']}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(chat_id, f"{user_info['name']}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
